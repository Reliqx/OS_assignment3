#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

//Functions for calculating each value
void *averagef(void *str);
void *minf(void *ptr);
void *maxf(void *ptr);

//Global variables
double average;
int min;
int max;

//Storing both size and values in a variable
typedef struct dstruct {
    int size;
    int *values;
} dstruct;

main(int argc, char *argv[]) {
//Create variables
    //Dynamic array to be the size of the number integers entered
    int arguments[argc - 1];
    int averagethread, minthread, maxthread;
    pthread_t thread1, thread2, thread3;

    //Change string to int
    for (int x = 0; x < (argc - 1); x++) {
        arguments[x] = atoi(argv[x + 1]);
    }

    //Storing number of arguments and their values
    dstruct ds = {argc - 1, arguments};
}

void *averagef(void *pointer) {
    dstruct *arguments;
    arguments = (dstruct *) pointer;

    //Variable to store amount of arguments entered
    int averagesize = arguments->size;

    //Calcualting average
    for (int x = 0; x < averagesize; x++) {
        average += (arguments->values[x]);
    }
    //Final calcualtion of average
    average = (int) (average / averagesize);
}

void *minf(void *pointer) {
    dstruct *arguments;
    arguments = (dstruct *) pointer;

    //Storing number of arguments
    int minsize = arguments->size;

    //Setting initial number to check against
    min = (arguments->values[0]);

    //Iterate through to find min
    for (int x = 1; x < minsize; x++) {
        if (min > (arguments->values[x])) {
            min = (arguments->values[x]);
        }
    }
}

void *maxf(void *pointer) {
    dstruct *arguments;
    arguments = (dstruct *) pointer;

    //Storing number of arguments
    int maxsize = arguments->size;

    //Setting initial number to check against
    max = arguments->values[0];

    //Iterate through to find the max
    for (int x = 1; x < maxsize; x++) {
        if (max < arguments->values[x]) {
            max = arguments->values[x];
        }
    }
}
